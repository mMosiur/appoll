openapi: 3.0.3
info:
  title: ApPOLLo backend API
  description: ApPOLLo API enables creation and management of polls, answers and app's users.
  version: 0.0.3
paths:
  # Endpoint dedicated to creation and browsing of all polls
  /polls:
    post:
      description: Create a new poll.
      operationId: createPoll
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Poll"
        required: true
      responses:
        201:
          description: Poll created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Poll"
        400:
          description: Invalid request.
    get:
      description: Get all polls.
      operationId: getPolls
      responses:
        200:
          description: A list of all active polls.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PollList"
  # Endpoint dedicated to view and management of a specific existing poll
  /polls/{poll_id}:
    get:
      description: Get a poll of a given id.
      operationId: getPollById
      parameters:
        - name: poll_id
          description: Id of the requested poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      responses:
        200:
          description: A poll object of a given id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Poll"
        404:
          description: Poll not found.
    put:
      description: Update a poll of a given id.
      operationId: updatePollById
      parameters:
        - name: poll_id
          description: Id of the updated poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Poll"
        required: true
      responses:
        200:
          description: Poll successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Poll"
        401:
          description: User not authenticated.
        403:
          description: User not authorized to edit this poll.
        404:
          description: Poll not found.
    delete:
      description: Remove a poll of a given id.
      operationId: deletePollById
      parameters:
        - name: poll_id
          description: Id of the deleted poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      responses:
        204:
          description: Poll successfully deleted.
        401:
          description: User not authenticated.
        403:
          description: User not authorized to delete this poll.
        404:
          description: Poll not found.
  # Endpoint dedicated to submitting user answers and browsing answers submitted so far
  /polls/{poll_id}/answers:
    post:
      description: Add a set of user submitted answers to the given poll.
      operationId: submitAnswersToPollById
      parameters:
        - name: poll_id
          description: Id of the target poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilledPoll"
        required: true
      responses:
        201:
          description: Answers submitted succesfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilledPoll"
        400:
          description: Invalid request.
        404:
          description: Poll doesn't exist.
        409:
          description: Conflict - poll no longer active.
    get:
      description: Get answer submits for a poll of a given id.
      operationId: getAnswersToPollById
      parameters:
        - name: poll_id
          description: Id of the target poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      responses:
        200:
          description: A list of answer submits.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FilledPollList"
        401:
          description: User not authenticated.
        403:
          description: User not authorized to browse answers to this poll.
  # Endpoint dedicated to view and management of poll's metadata
  /polls/{poll_id}/metadata:
    get:
      description: Get metadata from a poll of a given id.
      operationId: getPollMetadataById
      parameters:
        - name: poll_id
          description: Id of the requested poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      responses:
        200:
          description: Metadata of a poll of a given id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PollMetadata"
        404:
          description: Poll not found.
    put:
      description: Update metadata of a poll of a given id.
      operationId: updatePollMetadataById
      parameters:
        - name: poll_id
          description: Id of the updated poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PollMetadata"
        required: true
      responses:
        200:
          description: Poll successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Poll"
        401:
          description: User not authenticated.
        403:
          description: User not authorized to edit this poll.
        404:
          description: Poll not found.
  # Endpoints dedicated to browsing and editing questions in a poll
  /polls/{poll_id}/questions:
    get:
      description: Get a list of questions from a poll of a given id.
      operationId: getQuestionsFromPollById
      parameters:
        - name: poll_id
          description: Id of the requested poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      responses:
        200:
          description: List of questions from a poll of a given id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionList"
        404:
          description: Poll not found.
    post:
      description: Replace current set of questions in a poll of a given id.
      operationId: updateQuestionsForPollById
      parameters:
        - name: poll_id
          description: Id of the requested poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionList"
      responses:
        200:
          description: Poll successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Poll"
        401:
          description: User not authenticated.
        403:
          description: User not authorized to edit this poll.
        404:
          description: Poll not found.
  /polls/{poll_id}/questions/{question_id}:
    put:
      description: Edit a question of a given id.
      operationId: updateQuestionById
      parameters:
        - name: poll_id
          description: Id of the requested poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
        - name: question_id
          description: Id of the requested question.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Question"
      responses:
        200:
          description: Question successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        401:
          description: User not authenticated.
        403:
          description: User not authorized to edit this question.
        404:
          # Error schema should specify whether poll_id or question_id was wrong
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Question not present in poll.
    delete:
      description: Remove a question of a given id from the poll.
      operationId: removeQuestionFromPollById
      parameters:
        - name: poll_id
          description: Id of the requested poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
        - name: question_id
          description: Id of the requested question.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      responses:
        204:
          description: Question successfully removed from the poll.
        401:
          description: User not authenticated.
        403:
          description: User not authorized to edit this question.
        404:
          # Error schema message should specify whether poll_id or question_id was wrong
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Question not present in poll.
  # Endpoint dedicated to creation and browsing of users
  /users:
    post:
      description: Create a new user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        201:
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid request. Could be due to invalid username/password/email.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  # Endpoint dedicated to browsing and management of specific users
  /users/{user_id}:
    get:
      description: Get user of a given id.
      operationId: getUserById
      parameters:
        - name: user_id
          description: Id of the requested user.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      responses:
        200:
          description: A user object of a given id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: User not authenticated.
        403:
          description: User not authorized to view this user.
        404:
          description: User not found.
    put:
      description: Edit user of a given id.
      operationId: editUserById
      parameters:
        - name: user_id
          description: Id of the edited user.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        200:
          description: A user object of a given id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: User not authenticated.
        403:
          description: User not authorized to edit this user.
        404:
          description: User not found.
    delete:
      description: Delete user of a given id.
      operationId: deleteUserById
      parameters:
        - name: user_id
          description: Id of the requested user.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      responses:
        204:
          description: User successfully deleted.
        401:
          description: User not authenticated.
        403:
          description: User not authorized to delete this user.
        404:
          description: User not found.
  # Endpoint dedicated to browsing of user display profiles
  /users/{user_id}/profile:
    get:
      description: Get profile for user of a given id.
      operationId: getUserProfileById
      parameters:
        - name: user_id
          description: Id of the requested users profile.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      responses:
        200:
          description: A user profile of a given id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDisplayProfile"
        401:
          description: User not authenticated.
        404:
          description: User not found.
  # Endpoints dedicated to user login/logout operations
  /users/login:
    post:
      description: Login a user.
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginAttempt"
        required: true
      responses:
        204:
          description: User successfully logged in.
        400:
          description: Invalid request. Could be due to invalid username/password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/logout:
    post:
      description: Logout current user.
      operationId: logoutUser
      responses:
        default:
          description: User successfully logged out.
components:
  schemas:
    # ==POLL RELATED SCHEMAS==
    # Polls
    Poll:
      allOf:
        - $ref: "#/components/schemas/PollMetadata"
        - type: object
          required:
            - id
            - questions
          properties:
            id:
              type: integer
              example: 1234
              readOnly: true
            questions:
              type: array
              items:
                $ref: "#/components/schemas/Question"
    PollMetadata:
      type: object
      properties:
        name:
          type: string
          default: Poll
          example: Favorite things poll
        is_active:
          type: boolean
          default: true
          readOnly: true
    FilledPoll:
      type: object
      required:
        - poll_id
        - answers
      properties:
        poll_id:
          type: integer
          example: 1234
        answers:
          type: array
          items:
            $ref: "#/components/schemas/Answer"
    # Poll components
    Question:
      type: object
      required:
        - id
        - text
        - type
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
        text:
          type: string
          example: What is your favorite color?
          description: Question content text.
        type:
          type: string
          example: radio
          enum:
            - text
            - radio
            - checkbox
            - email
            - datetime
            - file
            - number
          description: Question type.
        options:
          type: array
          items:
            type: string
    Answer:
      type: object
      required:
        - id
        - question_id
        - answer_json
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
        question_id:
          type: integer
          example: 1234
        answer_json:
          type: string
          example: Blue
          description: Answer text (possibly a JSON object).
    # Poll indexing
    PollList:
      type: object
      properties:
        polls:
          type: array
          items:
            $ref: "#/components/schemas/PollListRecord"
    PollListRecord:
      type: object
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
        name:
          type: string
          example: Favorite things poll
    QuestionList:
      type: object
      properties:
        polls:
          type: array
          items:
            $ref: "#/components/schemas/Question"
    # Answer submits indexing
    FilledPollList:
      type: object
      properties:
        filledPolls:
          type: array
          items:
            $ref: "#/components/schemas/FilledPollListRecord"
    FilledPollListRecord:
      type: object
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
    # ==USER RELATED SCHEMAS==
    # User
    User:
      type: object
      required:
        - id
        - username
        - password
        - email
        - user_details
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
        username:
          type: string
          example: FlyingPanda98
        password:
          type: string
          example: Securepassword1337!
        email:
          type: string
          example: flpanda98@site.com
        user_details:
          $ref: "#/components/schemas/UserDetails"
    UserDisplayProfile:
      allOf:
        - type: object
          properties:
            username:
              type: string
              example: FlyingPanda98
        - $ref: "#/components/schemas/UserDetails"
    UserDetails:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
        age:
          type: integer
          example: 24
          default: -1
        sex:
          type: string
          example: male
          enum:
            - male
            - female
            - unspecified
          default: unspecified
    UserLoginAttempt:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: FlyingPanda98
        password:
          type: string
          example: Securepassword1337!
    # ==OTHER SCHEMAS==
    # Utility
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
