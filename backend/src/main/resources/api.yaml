openapi: 3.0.3
info:
  title: ApPOLLo backend API
  description: ApPOLLo API enables creation and management of polls, answers and app's users.
  version: 0.0.1
paths:
  # Endpoint dedicated to creation and browsing of all polls
  /polls:
    post:
      description: Create a new poll.
      operationId: createPoll
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Poll'
        required: true
      responses:
        201:
          description: Poll created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Poll'
        400:
          description: Invalid request.
    get:
      description: Get all polls.
      operationId: getPolls
      responses:
        200:
          description: A list of all active polls.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PollList'
  # Endpoint dedicated to view and management of a specific existing poll
  /polls/{id}:
    get:
      description: Get a poll of a given id.
      operationId: getPollById
      parameters:
        - name: id
          description: Id of the requested poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      responses:
        200:
          description: A poll object of a given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Poll'
        404:
          description: Poll not found.
    put:
      description: Update a poll of a given id.
      operationId: updatePollById
      parameters:
        - name: id
          description: Id of the updated poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Poll'
        required: true
      responses:
        200:
          description: Poll successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Poll'
        401:
          description: User not authenticated.
        403:
          description: User not authorized to edit this poll.
        404:
          description: Poll not found.
    delete:
      description: Remove a poll of a given id.
      operationId: deletePollById
      parameters:
        - name: id
          description: Id of the deleted poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      responses:
        200:
          description: Poll successfully deleted.
        401:
          description: User not authenticated.
        403:
          description: User not authorized to delete this poll.
        404:
          description: Poll not found.
  # Endpoint dedicated to submitting user answers to a specific active poll.
  /polls/{id}/answers:
    post:
      description: Add a set of user submitted answers to the given poll.
      operationId: submitAnswersToPollById
      parameters:
        - name: id
          description: Id of the target poll.
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1234
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilledPoll'
        required: true
      responses:
        202:
          description: Answers submitted succesfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
        400:
          description: Invalid request.
components:
  schemas:
    # Poll components
    Question:
      type: object
      required:
        - id
        - text
        - type
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
        text:
          type: string
          example: What is your favorite color?
          description: Question content text.
        type:
          type: string
          example: radio
          enum:
            - text
            - radio
            - checkbox
            - email
            - datetime
            - file
            - number
          description: Question type.
        options:
          type: array
          items:
            type: string
    Answer:
      type: object
      required:
        - id
        - question_id
        - answer_json
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
        question_id:
          type: integer
          example: 1234
        answer_json:
          type: string
          example: Blue
          description: Answer text (possibly a JSON object).
    # Polls
    Poll:
      type: object
      required:
        - id
        - questions
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
        name:
          type: string
          default: Poll
          example: Favorite things poll
        is_active:
          type: boolean
          default: true
          readOnly: true
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
    FilledPoll:
      type: object
      required:
        - poll_id
        - answers
      properties:
        poll_id:
          type: integer
          example: 1234
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
    # Poll accessing
    PollList:
      type: object
      properties:
        polls:
          type: array
          items:
            $ref: '#/components/schemas/PollListRecord'
    PollListRecord:
      type: object
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
        name:
          type: string
          example: Favorite things poll
    # Users
    User:
      type: object
      required:
        - id
        - username
        - password
        - email
        - user_details
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
        username:
          type: string
          example: FlyingPanda98
        password:
          type: string
          example: Securepassword1337!
        email:
          type: string
          example: flpanda98@site.com
        user_details:
          $ref: '#/components/schemas/UserDetails'

    UserDetails:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
        age:
          type: integer
          example: 24
          default: -1
        sex:
          type: string
          example: male
          enum:
            - male
            - female
            - unspecified
          default: unspecified
